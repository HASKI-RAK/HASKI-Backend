openapi: "3.0.3"
info:
  description: "This is the HASKI API documentation"
  version: "0.2.0"
  title: "HASKI API"
servers:
  - url: http://localhost:5000
    description: Development server (localhost)
tags:
  - name: "HASKI-intern"
    description: "Communication between Backend and Frontend"
  - name: "Logs"
    description: "All log data"
  - name: "Moodle"
    description: "Extension to communicate with Moodle LMS"
  - name: "Student"
    description: "All Student endpoints"
  - name: "User"
    description: "All User endpoints"
  - name: "Teacher"
    description: "All Teacher endpoints"
  - name: "CourseCreator"
    description: "All Course Creator endpoints"
  - name: "Admin"
    description: "All Admin endpoints"
  - name: "LTI"
    description: "All LTI and OpenID Connect flow endpoints"
paths:
  /user/{user_id}/{lms_user_id}: #Y
    get:
      tags:
        - "HASKI-intern"
        - "User"
      summary: "Get User"
      description: "Get the basic User data for a specific User"
      operationId: "getUser"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /user/{user_id}/{lms_user_id}/settings: #Y
    get:
      tags:
        - "HASKI-intern"
        - "User"
      summary: "Get User Settings"
      description: "Get the basic User Settings for a specific User"
      operationId: "getUserSettings"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags:
        - "HASKI-intern"
        - "User"
      summary: "Update User Settings"
      description: "Update the basic User Settings for a specific User"
      operationId: "putUserSettings"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Settings"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "User"
      summary: "Delete User Settings"
      description: "Delete a specific User Settings from HASKI and set back to default Values"
      operationId: "deleteUserSettings"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Settings"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /user/{user_id}/{lms_user_id}/contactform:
    post:
      summary: "Post the content of a user specific contactform"
      tags:
        - "HASKI-intern"
        - "User"
      operationId: "postContactForm"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactForm"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactForm"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
  /user/{user_id}/{lms_user_id}/student/{student_id}/learningCharacteristics:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get learning Characteristics"
      description: "Get the learning characteristics for a specific Student"
      operationId: "getLearningCharacteristics"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningCharacteristics"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Delete Learning Characteristic"
      description: "Delete Learning Characteristic for a specific User from HASKI"
      operationId: "deleteLearningCharacteristic"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/learningAnalytics:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get learning Analytics"
      description: "Get the learning analytics for a specific Student"
      operationId: "getLearningAnalytics"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningAnalytics"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Delete Learning Analytics"
      description: "Delete Learning Analytics for a specific User from HASKI"
      operationId: "deleteLearningAnalytics"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/learningStyle:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get learning Style"
      description: "Get the learning Style for a specific Student"
      operationId: "getLearningStyle"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningStyle"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    put:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Update learning Style"
      description: "Update the learning Style for a specific Student"
      operationId: "putLearningStyle"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LearningStyle"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningStyle"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Delete Learning Style"
      description: "Delete Learning Style for a specific User from HASKI"
      operationId: "deleteLearningStyle"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/learningStrategy:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get learning Strategy"
      description: "Get the learning Strategy for a specific Student"
      operationId: "getLearningStrategy"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningStrategy"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Delete Learning Strategy"
      description: "Delete Learning Strategy for a specific User from HASKI"
      operationId: "deleteLearningStrategy"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/knowledge:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get knowledge"
      description: "Get the knowledge for a specific Student"
      operationId: "getKnowledge"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Knowledge"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Delete knowledge"
      description: "Delete knowledge for a specific User from HASKI"
      operationId: "deleteKnowledge"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/course:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses"
      description: "Get all Courses for a specific Student"
      operationId: "getStudentCourses"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoursesStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Course"
      description: "Get the course by ID for a specific Student"
      operationId: "getStudentCourse"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topics"
      description: "Get all Topics for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopics"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicsStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/learningElement:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses LEs"
      description: "Get all Learning Elements for a specific Course for a specific Student"
      operationId: "getStudentCoursesLEs"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElementsStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topic"
      description: "Get a specific Topic for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopic"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "topic_id"
          in: path
          description: "The ID of the topic"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}/recommendation:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topic Recommendation"
      description: "Get a recommendation for a Topic for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopicREcommendation"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "topic_id"
          in: path
          description: "The ID of the topic"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #?
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}/learningPath:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Learning Path"
      description: "Get a topic learning path for a specific Student in a specific Course"
      operationId: "getStudentCoursesTopicLearningPath"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElementsPath"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}/subtopic:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topics Sub-Topics"
      description: "Get all Sub-Topics for a specific Topic for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopicsSubTopic"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "topic_id"
          in: path
          description: "The ID of the topic"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicsStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}/learningElement:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topic LEs"
      description: "Get all Learning Elements for a specific topic for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopicLEs"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "topic_id"
          in: path
          description: "The ID of the topic"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElementsStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo
  /user/{user_id}/{lms_user_id}/student/{student_id}/course/{course_id}/topic/{topic_id}/learningElement/{learning_element_id}:
    get:
      tags:
        - "HASKI-intern"
        - "Student"
      summary: "Get Student Courses Topic LE"
      description: "Get a specific Learning Element for a specific topic for a specific Course for a specific Student"
      operationId: "getStudentCoursesTopicLE"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "course_id"
          in: path
          description: "The ID of the course"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "topic_id"
          in: path
          description: "The ID of the topic"
          required: true
          schema:
            type: "integer"
          example: 1
        - name: "learning_element_id"
          in: path
          description: "The ID of the learning element"
          required: true
          schema:
            type: "integer"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElementStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo

  /user/{user_id}/{lms_user_id}/teacher/{teacher_id}/course:
    get:
      tags:
        - "HASKI-intern"
        - "Teacher"
      summary: "Get Teacher Courses"
      description: "Get all Courses for a specific Teacher"
      operationId: "getTeacherCourses"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "teacher_id"
          in: "path"
          description: "The ID of the Teacher"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CoursesTeacher"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #ToDo

  /user/{user_id}/{lms_user_id}/admin/{admin_id}/user:
    get:
      tags:
        - "HASKI-intern"
        - "Admin"
      summary: "Get Admin User"
      description: "Get all Users for a specific Admin"
      operationId: "getAdminUser"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "admin_id"
          in: "path"
          description: "The ID of the Admin"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersListAdmin"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #?
  /user/{user_id}/{lms_user_id}/admin/{admin_id}/logs:
    get:
      tags:
        - "HASKI-intern"
        - "Admin"
        - "Logs"
      summary: "Get AdminLogs"
      description: "Get all Logs for a specific Admin"
      operationId: "getAdminLogs"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "admin_id"
          in: "path"
          description: "The ID of the Admin"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Logs"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #?

  /logs/frontend:
    post:
      tags:
        - "HASKI-intern"
        - "Logs"
      summary: "Post Frontend Logs"
      description: "Post a new Frontend Log to the Backend"
      operationId: "postFrontendLog"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FrontendLog"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FrontendLog"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y

  /lms/user:
    post:
      tags:
        - "Moodle"
      summary: "Create User from Moodle"
      description: "Post the basic User data for a new User from Moodle"
      operationId: "postUserMoodle"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y #Y
  /lms/user/{user_id}/{lms_user_id}:
    put:
      tags:
        - "Moodle"
      summary: "Update User Moodle"
      description: "Update the basic User data for a specific User from Moodle"
      operationId: "putUserMoodle"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "Moodle"
      summary: "Delete User Moodle"
      description: "Delete a specific User from HASKI from Moodle"
      operationId: "deleteUserMoodle"
      parameters:
        - name: "user_id"
          in: "path"
          description: "The ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course:
    post:
      tags:
        - "Moodle"
      summary: "Create Course from Moodle"
      description: "Post a new Course from Moodle"
      operationId: "postCourseMoodle"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course/{course_id}/{lms_course_id}:
    put:
      tags:
        - "Moodle"
      summary: "Update Course Moodle"
      description: "Update the basic Course data from Moodle"
      operationId: "putCourseMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "Moodle"
      summary: "Delete Course Moodle"
      description: "Delete a Course from Moodle"
      operationId: "deleteCourseMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course/{course_id}/{lms_course_id}/topic:
    post:
      tags:
        - "Moodle"
      summary: "Create Topic from Moodle"
      description: "Post a new Topic from Moodle"
      operationId: "postTopicMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course/{course_id}/{lms_course_id}/topic/{topic_id}/{lms_topic_id}:
    put:
      tags:
        - "Moodle"
      summary: "Update Topic Moodle"
      description: "Update the basic Topic data from Moodle"
      operationId: "putTopicMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_topic_id"
          in: "path"
          description: "The ID of the Topic in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Topic"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Topic"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "Moodle"
      summary: "Delete Topic Moodle"
      description: "Delete a Topic from Moodle"
      operationId: "deleteTopicMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_topic_id"
          in: "path"
          description: "The ID of the Topic in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y #Y
  /lms/course/{course_id}/{lms_course_id}/topic/{topic_id}/{lms_topic_id}/learningElement:
    post:
      tags:
        - "Moodle"
      summary: "Create Learning Element from Moodle"
      description: "Post a new Learning Element from Moodle"
      operationId: "postLEMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_topic_id"
          in: "path"
          description: "The ID of the Topic in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LearningElement"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course/{course_id}/{lms_course_id}/topic/{topic_id}/{lms_topic_id}/learningElement/{learning_element_id}/{lms_learning_element_id}:
    put:
      tags:
        - "Moodle"
      summary: "Update Learning Element Moodle"
      description: "Update the basic Learning Element data from Moodle"
      operationId: "putLEMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_topic_id"
          in: "path"
          description: "The ID of the Topic in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "learning_element_id"
          in: "path"
          description: "The ID of the Learning Element"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_learning_element_id"
          in: "path"
          description: "The ID of the Learning Element in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LearningElement"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElement"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    delete:
      tags:
        - "Moodle"
      summary: "Delete Learning Element Moodle"
      description: "Delete a Learning Element from Moodle"
      operationId: "deleteLEMoodle"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_course_id"
          in: "path"
          description: "The ID of the Course in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_topic_id"
          in: "path"
          description: "The ID of the Topic in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "learning_element_id"
          in: "path"
          description: "The ID of the Learning Element"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_learning_element_id"
          in: "path"
          description: "The ID of the Learning Element in Moodle"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deletion"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/course/{course_id}/student/{student_id}:
    post:
      tags:
        - "Moodle"
      summary: "Add Student Course"
      description: "Add a Student to a Course and following also all Topics and LEs"
      operationId: "postStudentCourse"
      parameters:
        - name: "course_id"
          in: "path"
          description: "The ID of the Course"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CourseStudent"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/student/{student_id}/questionnaire/ils:
    post:
      tags:
        - "Moodle"
      summary: "Post ILS Questionnaire"
      description: "Post the answers to the ILS Questionnaire for a specific User from Moodle, the learning style will be calculated with a basic algorithm."
      operationId: "postIlsMoodle"
      parameters:
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionnaireILS"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningStyle"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/student/{student_id}/questionnaire/listk:
    post:
      tags:
        - "Moodle"
      summary: "Post ListK Questionnaire"
      description: "Post the answers to the ListK Questionnaire for a specific User from Moodle, the learning strategy will be calculated with a basic algorithm."
      operationId: "postListKMoodle"
      parameters:
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuestionnaireListK"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningStyle"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/student/{student_id}/{lms_user_id}/topic/{topic_id}:
    post:
      tags:
        - "Moodle"
      summary: "Update User Topic Moodle"
      description: "Update the topic user data for a specific User from Moodle"
      operationId: "putUserTopicMoodle"
      parameters:
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "topic_id"
          in: "path"
          description: "The ID of the Topic"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TopicVisit"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TopicVisit"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lms/student/{student_id}/{lms_user_id}/learning_element/{learning_element_id}:
    post:
      tags:
        - "Moodle"
      summary: "Update User Learning Element Moodle"
      description: "Update the Learning Element user data for a specific User from Moodle"
      operationId: "putUserLearningElementMoodle"
      parameters:
        - name: "student_id"
          in: "path"
          description: "The ID of the Student"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "lms_user_id"
          in: "path"
          description: "The Moodle ID of the User"
          required: true
          schema:
            type: "string"
          example: 1
        - name: "learning_element_id"
          in: "path"
          description: "The ID of the Learning Element"
          required: true
          schema:
            type: "string"
          example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LearningElementVisit"
      responses:
        "201":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LearningElementVisit"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError" #Y
  /lti_login:
    post:
      tags:
        - "LTI"
      summary: "LTI Login"
      description: "Login via LTI"
      operationId: "postLtiLogin"
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/LtiLogin"
      responses:
        '200':
          description: "Login successful"
        '400':
          description: "Missing or invalid parameters"
  /lti_launch:
    post:
      tags:
        - "LTI"
      summary: "LTI Launch endpoint"
      description: "This endpoint is responsible for launching the LTI tool. It uses the `verify_state` function to ensure the state parameter is valid."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                state:
                  type: "string"
                  description: "The state parameter to be verified."
      responses:
        '200':
          description: "LTI Launch successful."
        '403':
          description: "Forbidden, state parameter is not valid."
  /login:
    post:
      tags:
        - "LTI"
      summary: "Login endpoint"
      description: "This endpoint is responsible for user login. It uses the `get_cookie_expiration` function to set the expiration of the session cookie."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                nonce:
                  type: "string"
                  description: "The nonce parameter used to verify the session."
      responses:
        '200':
          description: "Login successful, session cookie set."
        '403':
          description: "Forbidden, nonce parameter is not valid or session could not be established."
        '400':
          description: "he passed JWT is invalid. Inner Exception: Not enough segments"
  /logout:
    get:
      tags:
        - "LTI"
      summary: "Logout endpoint"
      description: "This endpoint is responsible for user logout. It uses the `get_logout` function to clear the session cookie."
      responses:
        '204':
          description: "Logout successful, session cookie cleared."
        '500':
          description: "Internal Server Error, logout process failed."
  /lti_launch_view:
    get:
      tags:
        - "LTI"
      summary: "LTI Launch View endpoint"
      description: "This endpoint is responsible for sending the endpoint which launches the LTI tool to the frontend."
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  lti_launch_view:
                    type: "string"
                    description: "The URL of the LTI launch view."
        '500':
          description: "Internal Server Error."
  /lms/user_from_cookie:
    get:
      tags:
        - "LTI"
      summary: "Get User From Cookie endpoint"
      description: "This endpoint is responsible for getting user info from the cookie."
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    type: "object"
                    description: "The user object retrieved from the cookie."
        '400':
          description: "Bad Request. The passed parameter values are invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WrongParameterValueError'
        '401':
          description: "Unauthorized. The request is unauthorized."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AException'
  /login_credentials:
    post:
      tags:
        - "LTI"
      summary: "Login Credentials endpoint"
      description: "This endpoint is responsible for posting a user login by id and getting a user by id."
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "object"
              properties:
                lms_user_id:
                  type: "integer"
                  description: "The LMS user ID."
      responses:
        '201':
          description: "Successful operation, user created."
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  user:
                    type: "object"
                    description: "The user object created."
        '400':
          description: "Bad Request. The passed parameter values are invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WrongParameterValueError'
        '401':
          description: "Unauthorized. The request is unauthorized."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: "Not Found. The requested resource could not be found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AException'
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AException'
  /news:
    get:
      tags:
        - "News"
      summary: "Get News from the backend"
      description: "Get News by the language and university"
      operationId: "getNews"
      parameters:
        - name: "language_id"
          in: "path"
          description: "short id of a language"
          required: true
          schema:
            type: "string"
          example: "en"
        - name: "university"
          in: "path"
          description: "short id of the university"
          required: false
          schema:
            type: "string"
          example: "HS-KE"
      responses:
        "200":
          description: "Successful Operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/News"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneralError"
    post:
      tags: "News"
      summary: "Post the News"
      operationId: "postNews"
      parameters:
        - name: "univerity"
          in: "path"
          description: "university the news is for"
          required: true
          schema:
            type: "string"
          example: "HS-KE"
        - name: "language_id"
          in: "path"
          description: "The language the news is in"
          required: true
          schema:
            type: "string"
          example: "en"
        - name: "created_at"
          in: "path"
          description: "date of creation"
          required: true
          schema:
            type: "string"
          example: "2025-04-15 16:00:00"
        - name: "expiration_date"
          in: "path"
          description: "Date until when the news is valid and can be displayed"
          required: true
          schema:
            type: "string"
          example: "2025-04-15 16:00:00"
        - name: "news_content"
          in: "path"
          description: "Message that gets displayed and returned upon get"
          required: true
          schema:
            type: "string"
          example: "This is News"
    responses:
      "201":
        description: "Successful Operation"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/News"
      "400":
        description: "Bad Request"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneralError"
      "404":
        description: "Not Found"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneralError"
components:
  schemas:
    WrongParameterValueError:
      type: "object"
      properties:
        message:
          type: "string"
        status_code:
          type: "integer"
    UnauthorizedError:
      type: "object"
      properties:
        message:
          type: "string"
        status_code:
          type: "integer"
    AException:
      type: "object"
      properties:
        message:
          type: "string"
        status_code:
          type: "integer"
    LtiLogin:
      type: "object"
      properties:
        iss:
          type: "string"
          example: "https://moodle.de"
          description: "The Issuer"
        client_id:
          type: "string"
          example: "cBahj22jsj"
          description: "Client ID set in moodle"
        login_hint:
          type: "string"
          example: "e20984648b488fb11b323741425126dca07aa300"
          description: "carry information about the actual LTI message that is being launched."
        lti_message_hint:
          type: "string"
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ2ZXJpZmllciI6IjhhOGFjNDQ0NDJjNjkxMDFjYjRiMzVkZjQyNTA5NzhhNjUyYzhmNTY0YWU3MDhjOTcxMGE1OTQ2ODAzMTY3MzUyMjA3YTczNjQ2YjRlOTA1NTYyNzM1MDMxNDM1ZGY1MzU3MDQ5Y2Q1YzMyNWYwMDA5N2Y0YjQ4YTA5MWQwMTA5IiwiY2FudmFzX2RvbWFpbiI6ImNhbnZhcy5zdGdlb3JnZXMuYmMuY2EiLCJjb250ZXh0X3R5cGUiOiJDb3Vyc2UiLCJjb250ZXh0X2lkIjo0OTcwMDAwMDAwMDAwMDg2MSwiZXhwIjoxNTkyMjQ5NzY4fQ.KmI75uFTAZBWe9F1mZ6nXnpabWVKDUm4HS6HjP-jExw"
          description: "carry information about the actual LTI message that is being launched."
        target_link_uri:
          type: "string"
          example: "https://OurLtiApplication/someEndpoint"
          description: "The target link uri"
        lti_deployment_id:
          type: "string"
          example: "1"
          description: "Deployment ID set by moodle"
    AccessLog:
      type: "object"
      properties:
        time:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the Access"
        user:
          type: "string"
          example: "Max Mustermann"
          description: "Who accessed the System"
        session_id:
          type: "string"
          example: "1a2b3c4d"
          description: "The session id (randomly generated)"
        message:
          type: "string"
          example: "Accessed was Endpoint xyz."
          description: "Message from the log"
    Course:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The course ID within HASKI"
        name:
          type: "string"
          example: "Test Course"
          description: "The name of the course"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the course from the LMS"
        created_by:
          type: "integer"
          format: "int64"
          example: 1
          description: "Who created the course"
        created_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course created"
        last_updated:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course last updated"
        university:
          type: "string"
          example: "TH-AB"
          description: "To which university belongs the Course"
    CourseAdmin:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The course ID within HASKI"
        name:
          type: "string"
          example: "Test Course"
          description: "The name of the course"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the course from the LMS"
        created_by:
          type: "string"
          example: "Maria Musterfrau"
          description: "Who created the course"
        created_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course created"
        last_updated:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course last updated"
        university:
          type: "string"
          example: "TH-AB"
          description: "To which university belongs the Course"
    CoursesAdmin:
      type: "object"
      properties:
        courses:
          type: "array"
          items:
            $ref: "#/components/schemas/CourseAdmin"
    CourseCourseCreator:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The course ID within HASKI"
        name:
          type: "string"
          example: "Test Course"
          description: "The name of the course"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the course from the LMS"
        created_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course created"
        last_updated:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course last updated"
        nr_teachers:
          type: "integer"
          format: "int64"
          example: 3
          description: "The number of Teachers within the course"
        teachers:
          $ref: "#/components/schemas/UsersList"
    CoursesCourseCreator:
      type: "object"
      properties:
        courses:
          type: "array"
          items:
            $ref: "#/components/schemas/CourseCourseCreator"
    CourseStudent:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The course ID within HASKI"
        name:
          type: "string"
          example: "Test Course"
          description: "The name of the course"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the course from the LMS"
        time_spend:
          type: "number"
          format: "double"
          example: 234.56
          description: "The time spend in the course in minutes"
    CoursesStudent:
      type: "object"
      properties:
        courses:
          type: "array"
          items:
            $ref: "#/components/schemas/CourseStudent"
    CourseTeacher:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The course ID within HASKI"
        name:
          type: "string"
          example: "Test Course"
          description: "The name of the course"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the course from the LMS"
        user_nr:
          type: "integer"
          format: "int64"
          example: 42
          description: "The number of students enrolled in the course"
        created_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course created"
        last_updated:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the course last updated"
    CoursesTeacher:
      type: "object"
      properties:
        courses:
          type: "array"
          items:
            $ref: "#/components/schemas/CourseTeacher"
    DashboardStudentCourse:
      type: "object"
      properties:
        topics:
          type: "array"
          items:
            $ref: "#/components/schemas/TopicStudent"
        learning_style:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStyle"
        learning_style_course:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStyle"
    DashboardStudentOverview:
      type: "object"
      properties:
        courses:
          type: "array"
          items:
            $ref: "#/components/schemas/CourseStudent"
        learning_style:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStyle"
        learning_strategy:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStrategy"
    DashboardStudentTopic:
      type: "object"
      properties:
        topics:
          type: "array"
          items:
            $ref: "#/components/schemas/TopicStudent"
    DashboardStudentSubTopic:
      type: "object"
      properties:
        learning_elements:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningElementStudent"
    DashboardTeacherClicks:
      type: "object"
      properties:
        topic_name:
          type: "string"
          example: "Test Topic 1"
          description: "The name of the topic"
        popularity:
          type: "number"
          format: "double"
          example: 7.8
          description: "The popularity value of the topics"
    DashboardTeacherClicksLE:
      type: "object"
      properties:
        topic_name:
          type: "string"
          example: "Test Learning Element 1"
          description: "The name of the LE"
        visits:
          type: "integer"
          format: "int64"
          example: 42
          description: "The nr of visits of the learning element"
    DashboardTeacherCourse:
      type: "object"
      properties:
        learning_style:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStyleTeacher"
        performer:
          type: "array"
          items:
            $ref: "#/components/schemas/Performer"
        time_spend:
          type: "array"
          items:
            $ref: "#/components/schemas/TimeTrackerTeacher"
    DashboardTeacherFeedback:
      type: "object"
      properties:
        learning_element_name:
          type: "string"
          example: "Test Learning Element 1"
          description: "The name of the learning element"
        score:
          type: "number"
          format: "double"
          example: 4.2
          description: "The rating of the LE"
    DashboardTeacherKnowledge:
      type: "object"
      properties:
        score:
          type: "number"
          format: "double"
          example: 56.7
          description: "The knowledge score of a student"
    DashboardTeacherKnowledgeLE:
      type: "object"
      properties:
        error_analysis:
          type: "array"
          items:
            type: "object"
            properties:
              learning_element_name:
                type: "string"
                example: "Test Learning Element 1"
                description: "The name of the learning element"
              first_try:
                type: "integer"
                format: "int64"
                example: 10
                description: "The nr of students, that managed to have correct answers in the first try"
              second_try:
                type: "integer"
                format: "int64"
                example: 30
                description: "The nr of students, that managed to have correct answers in the second try"
              third_try:
                type: "integer"
                format: "int64"
                example: 8
                description: "The nr of students, that managed to have correct answers in the third or more tries"
        learning_progress:
          type: "array"
          items:
            type: "object"
            properties:
              learning_element_name:
                type: "string"
                example: "Test Learning Element 1"
                description: "The name of the learning element"
              min_point:
                type: "number"
                format: "double"
                example: 0.15
                description: "The percantage of points scored minimum"
              avg_point:
                type: "number"
                format: "double"
                example: 0.6
                description: "The percantage of points scored on average"
              max_point:
                type: "number"
                format: "do2le"
                example: 0.25
                description: "The percantage of points scored maximum"
    DashboardTeacherLearningElements:
      type: "object"
      properties:
        feedback:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherFeedback"
        clicks:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherClicksLE"
        knowledge:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherKnowledgeLE"
        time:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherTimeLE"
    DashboardTeacherTime:
      type: "object"
      properties:
        month:
          type: "integer"
          format: "int64"
          example: 1
          description: "The number of the month that is measured"
        topics:
          type: "array"
          items:
            type: "object"
            properties:
              topic_name:
                type: "string"
                example: "Test Topic 1"
                description: "The name of the topic"
              time_spend:
                type: "number"
                format: "double"
                example: 50.3
                description: "The time spend in the topic on average"
    DashboardTeacherTimeLE:
      type: "object"
      properties:
        learning_element_name:
          type: "string"
          example: "Test Learning Element 1"
          description: "The name of the learning element"
        min_time:
          type: "number"
          format: "double"
          example: 3.5
          description: "The time spend minimum in that LE"
        avg_time:
          type: "number"
          format: "double"
          example: 7.2
          description: "The time spend on average in that LE"
        max_time:
          type: "number"
          format: "double"
          example: 12.9
          description: "The time spend maximum in that LE"
    DashboardTeacherTopic:
      type: "object"
      properties:
        clicks:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherClicks"
        knowledge:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherKnowledge"
        time:
          type: "array"
          items:
            $ref: "#/components/schemas/DashboardTeacherTime"
    Deletion:
      type: "object"
      properties:
        message:
          type: "string"
          example: "Deletion was successful"
          description: "A message describing what was deleted"
    ErrorLog:
      type: "object"
      properties:
        time:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the Access"
        session_id:
          type: "string"
          example: "1a2b3c4d"
          description: "The session id (randomly generated)"
        message:
          type: "string"
          example: "Error on updating the learner model."
          description: "Message from the log"
    FrontendLogEntryFCP:
      type: "object"
      properties:
        name:
          type: "string"
          example: "first-contentful-paint"
          description: "name of the entry"
        entryType:
          type: "string"
          example: "paint"
          description: "The type of the entry"
        startTime:
          type: "number"
          format: "double"
          example: 3957.6999999284744
          description: "The start time of the entry"
        duration:
          type: "number"
          format: "double"
          example: 0
          description: "The duration time of the entry"
    FrontendLogEntryTTFB:
      type: "object"
      properties:
        name:
          type: "string"
          example: "http://localhost:8080/"
          description: "The name of the entry"
        entryType:
          type: "string"
          example: "navigation"
          description: "The type of the entry"
        startTime:
          type: "number"
          format: "double"
          example: 0
          description: "The start time of the entry"
        duration:
          type: "number"
          format: "double"
          example: 4003.0999999046326
          description: "The duration of the entry"
        initiatorType:
          type: "string"
          example: "navigation"
          description: "The type of initiator for the entry"
        nextHopProtocol:
          type: "string"
          example: "http/1.1"
          description: "The next hop of the entry"
        workerStart:
          type: "number"
          format: "double"
          example: 0
          description: "The start of the worker for the entry"
        redirectStart:
          type: "number"
          format: "double"
          example: 0
          description: "The redirect start of the entry"
        redirectEnd:
          type: "number"
          format: "double"
          example: 0
          description: "The redirect end of the entry"
        fetchStart:
          type: "number"
          format: "double"
          example: 7.699999928474426
          description: "The fetch start of the entry"
        domainLookupStart:
          type: "number"
          format: "double"
          example: 99.19999992847443
          description: "The domain lookup start of the entry"
        domainLookupEnd:
          type: "number"
          format: "double"
          example: 99.29999995231628
          description: "The domain lookup end of the entry"
        connectStart:
          type: "number"
          format: "double"
          example: 99.29999995231628
          description: "The connecet start for the entry"
        connectEnd:
          type: "number"
          format: "double"
          example: 99.89999997615814
          description: "The connect end for the entry"
        secureConnectionStart:
          type: "number"
          format: "double"
          example: 0,
          description: "The secure connection start of the entry"
        requestStart:
          type: "integer"
          format: "int64"
          example: 100
          description: "The request start for the entry"
        responseStart:
          type: "number"
          format: "double"
          example: 3638.7999999523163
          description: "The response start of the entry"
        responseEnd:
          type: "number"
          format: "double"
          example: 3640
          description: "The response end of the entry"
        transferSize:
          type: "integer"
          format: "int64"
          example: 810
          description: "The transfer size of the entry"
        encodedBodySize:
          type: "integer"
          format: "int64"
          example: 510
          description: "The encoded body size of the entry"
        decodedBodySize:
          type: "integer"
          format: "int64"
          example: 510
          description: "The decoded body size of the entry"
        serverTiming:
          type: "array"
          items:
            type: "string"
            example: ""
          description: "The server timing of the entry"
        workerTiming:
          type: "array"
          items:
            type: "string"
            example: ""
          description: "The worker timing of the entry"
        unloadEventStart:
          type: "number"
          format: "double"
          example: 0
          description: "The unload event start of the entry"
        unloadEventEnd:
          type: "number"
          format: "double"
          example: 0
          description: "The unload event end of the entry"
        domInteractive:
          type: "number"
          format: "double"
          example: 3717.5
          description: "The dom interactive value of the entry"
        domContentLoadedEventStart:
          type: "number"
          format: "double"
          example: 3937.5999999046326
          description: "The dom content loaded event start of the entry"
        domContentLoadedEventEnd:
          type: "number"
          format: "double"
          example: 3938.899999976158
          description: "The dom content loaded event end of the entry"
        domComplete:
          type: "number"
          format: "double"
          example: 4003.0999999046326
          description: "The dom complete of the entry"
        loadEventStart:
          type: "number"
          format: "double"
          example: 4003.0999999046326
          description: "The load event start of the entry"
        loadEventEnd:
          type: "number"
          format: "double"
          example: 4003.0999999046326
          description: "The load event end of the entry"
        type:
          type: "string"
          example: "navigate"
          description: "The type of the event"
        redirectCount:
          type: "number"
          format: "double"
          example: 0
          description: "The redirect count of the entry"
    FrontendLogEntryCLS:
      type: "object"
    FrontendLogEntryLCP:
      type: "object"
      properties:
        name:
          type: "string"
          example: ""
          description: "The name of the entry"
        entryType:
          type: "string"
          example: "largest-contentful-paint"
          description: "The type of the log entry"
        startTime:
          type: "number"
          format: "double"
          example: "3957.699"
          description: "The start time of the entry"
        duration:
          type: "number"
          format: "double"
          example: 0
          description: "The duration of the entry"
        size:
          type: "integer"
          format: "int64"
          example: 867
          description: "The size of the entry"
        renderTime:
          type: "number"
          format: "double"
          example: 3957.699
          description: "The render time of the entry"
        loadTime:
          type: "number"
          format: "double"
          example: 0
          description: "The load time of the entry"
        firstAnimatedFrameTime:
          type: "number"
          format: "double"
          example: 0
          description: "The frame time for the first animation"
        id:
          type: "string"
          example: ""
          description: "The id of the entry"
        url:
          type: "string"
          example: ""
          description: "The url of the entry"
    FrontendLogEntryFID:
      type: "object"
    FrontendLogEntryINP:
      type: "object"
    FrontendLog:
      type: "object"
      required:
        - "name"
        - "value"
        - "rating"
        - "delta"
        - "entries"
        - "id"
        - "navigationType"
      properties:
        name:
          type: "string"
          example: "FCP"
          description: "Name of the log data"
          enum: [ "FCP", "TTFB", "CLS", "LCP", "FID", "INP" ]
        value:
          type: "number"
          format: "double"
          example: 3957.6999999284744
          description: "Value of the log data"
        rating:
          type: "string"
          example: "poor"
          description: "Rating of the log data"
          enum: [ "good", "needs-improvement", "poor" ]
        delta:
          type: "number"
          format: "double"
          example: 3957.6999999284744
          description: "Delta of the log data"
        entries:
          type: "array"
          description: "A frontend log data entry"
          items:
            anyOf:
              - $ref: "#/components/schemas/FrontendLogEntryFCP"
              - $ref: "#/components/schemas/FrontendLogEntryTTFB"
              - $ref: "#/components/schemas/FrontendLogEntryCLS"
              - $ref: "#/components/schemas/FrontendLogEntryLCP"
              - $ref: "#/components/schemas/FrontendLogEntryFID"
              - $ref: "#/components/schemas/FrontendLogEntryINP"
        id:
          type: "string"
          example: "v3-1665068191217-4248786867866"
          description: "The ID of the log data"
        navigationType:
          type: "string"
          example: "navigate"
          description: "The navigation type of the log data"
          enum:
            [
              "navigate",
              "reload",
              "back-forward",
              "back-forward-cache",
              "prerender",
            ]
    GeneralError:
      type: "object"
      properties:
        error:
          type: "string"
          example: "Ups! Something went wrong..."
          description: "A message describing what went wrong"
    IlsQuestionnaire:
      type: "array"
      items:
        type: "object"
        properties:
          question_id:
            type: "string"
            example: "vv_1_f3"
            description: "The ID of the question from the ILS and the number of the question in the questionnaire"
          answer:
            type: "string"
            example: "a"
            description: "The answer the student selected"
    Knowledge:
      type: "object"
    LearningAnalytics:
      type: "object"
    LearningCharacteristics:
      type: "object"
      properties:
        learning_style:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStyle"
        learning_strategy:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningStrategy"
        knowledge:
          type: "array"
          items:
            $ref: "#/components/schemas/Knowledge"
        learning_analytics:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningAnalytics"
    LearningElement:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The id of the learning element"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the learning element from the LMS"
        activity_type:
          type: "string"
          example: "Quiz"
          description: "The type of activity from the LMS"
        classification:
          type: "string"
          example: "RQ"
          description: "The classification of the LE according to Graf et al."
        name:
          type: "string"
          example: "Test Learning Element"
          description: "The name of the LE"
        created_by:
          type: "string"
          example: "Maria Musterfrau"
          description: "Who created the LE?"
        created_at:
          type: "number"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the LE completed"
        last_updated:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the last time, the LE was opened?"
        university:
          type: "string"
          example: "TH-AB"
          description: "The university the LE belongs to"
    LearningElementStudent:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The id of the learning element"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the learning element from the LMS"
        activity_type:
          type: "string"
          example: "Quiz"
          description: "The type of activity from the LMS"
        classification:
          type: "string"
          example: "RQ"
          description: "The classification of the LE according to Graf et al."
        name:
          type: "string"
          example: "Test Learning Element"
          description: "The name of the LE"
        done:
          type: "boolean"
          example: false
          description: "Are all learning elements done within the topic"
        done_at:
          type: "number"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the LE completed"
        nr_of_visits:
          type: "integer"
          format: "int64"
          example: 3
          description: "The number of times the LE was clicked on"
        last_visit:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the last time, the LE was opened?"
        time_spend:
          type: "number"
          format: "double"
          example: 123.45
          description: "The time spend within the LE in minutes"
        is_recommended:
          type: "boolean"
          example: true
          description: "Is the LE recommended"
    LearningElementsStudent:
      type: "object"
      properties:
        learning_elements:
          type: "array"
          items:
            $ref: "#/components/schemas/LearningElementStudent"
    LearningElementsPath:
      type: "array"
      items:
        type: "object"
        properties:
          position:
            type: "integer"
            format: "int64"
            example: 1
            description: "The position of the learning element within the path"
          learning_element:
            $ref: "#/components/schemas/LearningElementStudent"
    LearningElementVisit:
      type: "object"
      properties:
        visit_start:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the learning element visited"
        previous_learning_element_id:
          type: "number"
          format: "integer"
          example: 1
          description: "The ID of the learning element, that was clicked before"
    LearningStrategy:
      type: "object"
      properties:
        att:
          type: "number"
          format: "double"
          example: 3.0
          description: "The average of the att dimension"
        characteristic_id:
          type: "number"
          format: "int64"
          example: 1
          description: "The ID of the characteristic from the ListK"
        cogn_str:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the cogn_str dimension"
        con:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the con dimension"
        crit_rev:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the crit_rev dimension"
        eff:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the eff dimension"
        elab:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the elab dimension"
        ext_res_mng_str:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the ext_res_mng_str dimension"
        goal_plan:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the goal_plan dimension"
        id:
            type: "number"
            format: "int64"
            example: 1
            description: "The ID of the learning strategy"
        int_res_mng_str:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the int_res_mng_str dimension"
        lit_res:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the lit_res dimension"
        lrn_env:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the lrn_env dimension"
        lrn_w_cls:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the lrn_w_cls dimension"
        metacogn_str:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the metacogn_str dimension"
        org:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the org dimension"
        reg:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the reg dimension"
        rep:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the rep dimension"
        time:
            type: "number"
            format: "double"
            example: 3.0
            description: "The average of the time dimension"
    LearningStyle:
      type: "object"
      properties:
        characteristic_id:
          type: "number"
          format: "int64"
          example: 1
          description: "The ID of the characteristic from the ILS"
        id:
          type: "number"
          format: "int64"
          example: 1
          description: "The ID of the learning style"
        perception_dimension:
          type: "string"
          example: "sns"
          description: "The dimension expression for perception according to Felder-Silverman"
        perception_value:
          type: "number"
          format: "int64"
          example: 7
          description: "The dimension value for perception according to Felder-Silverman"
        input_dimension:
          type: "string"
          example: "vis"
          description: "The dimension expression for input according to Felder-Silverman"
        input_value:
          type: "number"
          format: "int64"
          example: 7
          description: "The dimension value for input according to Felder-Silverman"
        processing_dimension:
          type: "string"
          example: "act"
          description: "The dimension expression for processing according to Felder-Silverman"
        processing_value:
          type: "number"
          format: "int64"
          example: 7
          description: "The dimension value for processing according to Felder-Silverman"
        understanding_dimension:
          type: "string"
          example: "seq"
          description: "The dimension expression for understanding according to Felder-Silverman"
        understanding_value:
          type: "number"
          format: "int64"
          example: 7
          description: "The dimension value for understanding according to Felder-Silverman"
    LearningStyleTeacher:
      type: "object"
      properties:
        perception_avg:
          type: "number"
          format: "double"
          example: 3.1
          description: "The average of the perception dimension"
        perception_min:
          type: "number"
          format: "double"
          example: -9.5
          description: "The minimum of the perception dimension"
        perception_max:
          type: "number"
          format: "double"
          example: 8.7
          description: "The maximum of the perception dimension"
        input_avg:
          type: "number"
          format: "double"
          example: 3.1
          description: "The average of the input dimension"
        input_min:
          type: "number"
          format: "double"
          example: -9.5
          description: "The minimum of the input dimension"
        input_max:
          type: "number"
          format: "double"
          example: 8.7
          description: "The maximum of the input dimension"
        processing_avg:
          type: "number"
          format: "double"
          example: 3.1
          description: "The average of the processing dimension"
        processing_min:
          type: "number"
          format: "double"
          example: -9.5
          description: "The minimum of the processing dimension"
        processing_max:
          type: "number"
          format: "double"
          example: 8.7
          description: "The maximum of the processing dimension"
        understanding_avg:
          type: "number"
          format: "double"
          example: 3.1
          description: "The average of the understanding dimension"
        understanding_min:
          type: "number"
          format: "double"
          example: -9.5
          description: "The minimum of the understanding dimension"
        understanding_max:
          type: "number"
          format: "double"
          example: 8.7
          description: "The maximum of the understanding dimension"
    ListKQuestionnaire:
      type: "array"
      items:
        type: "object"
        properties:
          question_id:
            type: "string"
            example: "org1_f1"
            description: "The ID of the question from the ListK, id of the question inside the dimension and the number of the question in the questionnaire"
          answer:
            type: "number"
            format: "int64"
            example: 1
            description: "The answer the student selected"
    Logs:
      type: "object"
      properties:
        access_logs:
          type: "array"
          items:
            $ref: "#/components/schemas/AccessLog"
        frontend_logs:
          type: "array"
          items:
            $ref: "#/components/schemas/FrontendLog"
        main_logs:
          type: "array"
          items:
            $ref: "#/components/schemas/MainLog"
        error_logs:
          type: "array"
          items:
            $ref: "#/components/schemas/ErrorLog"
        system_logs:
          type: "array"
          items:
            $ref: "#/components/schemas/SystemLog"
    MainLog:
      type: "object"
      properties:
        time:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the Access"
        session_id:
          type: "string"
          example: "1a2b3c4d"
          description: "The session id (randomly generated)"
        message:
          type: "string"
          example: "Calculation of new learning Path"
          description: "Message from the log"
    Performer:
      type: "object"
      properties:
        poor_performer:
          type: "number"
          format: "double"
          example: 0.1
          description: "The percentage of poor performer"
        average_performer:
          type: "number"
          format: "double"
          example: 0.6
          description: "The percentage of average performer"
        high_performer:
          type: "number"
          format: "double"
          example: 0.3
          description: "The percentage of high performer"
    QuestionnaireILS:
      type: "object"
      properties:
        ils:
          $ref: "#/components/schemas/IlsQuestionnaire"
    QuestionnaireListK:
      type: "object"
      properties:
        list_k:
          $ref: "#/components/schemas/ListKQuestionnaire"
    Settings:
      type: "object"
      required:
        - "password"
      properties:
        theme:
          type: "array"
          items:
            $ref: "#/components/schemas/Theme"
        password:
          type: "string"
          example: "password"
          description: "The password of the User"
    ContactForm:
      type: "object"
      properties:
        report_topic:
          type: "string"
          example: "Lernelement / UI / Design / Sonstiges"
          description: "The topic of the report"
        report_type:
          type: "string"
          example: "Problem / Fehler / Bewertung / Funktionalität / Sonstiges"
          description: "The type of the report"
        report_description:
          type: "string"
          example: "Das Lernelement ist nicht verständlich"
          description: "The description of the report"
    SystemLog:
      type: "object"
      properties:
        time:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the Access"
        message:
          type: "string"
          example: "System is up and running."
          description: "Message from the log"
    Theme:
      type: "object"
      properties:
        color:
          type: "string"
          example: "dark"
          description: "The prefered color of the User"
        style:
          type: "string"
          example: "dark"
          description: "The prefered style of the User"
        typography:
          type: "string"
          example: "Arial Black"
          description: "The prefered typography of the User"
        language:
          type: "string"
          example: "DE"
          description: "The prefered language of the USer"
    TimeTrackerTeacher:
      type: "object"
      properties:
        month:
          type: "integer"
          format: "int64"
          example: 1
          description: "The month, the time is measured in"
        min_time:
          type: "number"
          format: "double"
          example: 15.4
          description: "The minimum time a student spend in the course"
        max_time:
          type: "number"
          format: "double"
          example: 52.7
          description: "The maximum time a student spend in the course"
        avg_time:
          type: "number"
          format: "double"
          example: 52.7
          description: "The average time a student spend in the course"
    Topic:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The topic ID within HASKI"
        name:
          type: "string"
          example: "Test Topic"
          description: "The name of the topic"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the topic from the LMS"
        is_topic:
          type: "boolean"
          example: true
          description: "Declare whether a topic is a topic or a sub-topic"
        parent_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the parent topic (if exists)"
        contains_le:
          type: "boolean"
          example: false
          description: "Does determine, whether a topic contais LEs (true) or other sub-topics (false)"
        created_by:
          type: "string"
          example: "Maria Musterfrau"
          description: "Who created the topic"
        created_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the topic created?"
        updated_at:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the last time, the topic was modified?"
        university:
          type: "string"
          example: "TH-AB"
          description: "The university the topic belongs to"
    TopicStudent:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The topic ID within HASKI"
        name:
          type: "string"
          example: "Test Topic"
          description: "The name of the topic"
        lms_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the topic from the LMS"
        is_topic:
          type: "boolean"
          example: true
          description: "Declare whether a topic is a topic or a sub-topic"
        parent_id:
          type: "integer"
          format: "int64"
          example: 1
          description: "The ID of the parent topic (if exists)"
        contains_le:
          type: "boolean"
          example: false
          description: "Does determine, whether a topic contais LEs (true) or other sub-topics (false)"
        done:
          type: "boolean"
          example: false
          description: "Are all learning elements/ sub-topics done within the topic"
        done_percantage:
          type: "number"
          format: "double"
          example: 75.25
          description: "The percantage of done LEs/Sub-topics"
        last_visit:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the last time, the topic was opened?"
        time_spend:
          type: "number"
          format: "double"
          example: 123.45
          description: "The time spend within the topic in minutes"
        is_recommended:
          type: "boolean"
          example: true
          description: "Is the topic recommended"
    TopicsStudent:
      type: "object"
      properties:
        topics:
          type: "array"
          items:
            $ref: "#/components/schemas/TopicStudent"
    TopicsPath:
      type: "array"
      items:
        type: "object"
        properties:
          position:
            type: "integer"
            format: "int64"
            example: 1
            description: "The position of the topic within the path"
          topic:
            $ref: "#/components/schemas/TopicStudent"
    TopicVisit:
      type: "object"
      properties:
        visit_start:
          type: "string"
          format: "date-time"
          example: "2017-07-21T17:32:28Z"
          description: "When was the topic visited"
        previous_topic_id:
          type: "number"
          format: "integer"
          example: 1
          description: "The ID of the topic, that was clicked before"
    User:
      type: "object"
      required:
        - "name"
        - "university"
        - "lms_user_id"
        - "role"
      properties:
        id:
          type: "number"
          format: "int64"
          example: 1
          description: "HASKI intern id for Users. Autogenerated by DB."
        name:
          type: "string"
          example: "Max Mustermann"
          description: "Name of the User"
        university:
          type: "string"
          example: "TH-AB"
          description: "The University the User belongs to"
        lms_user_id:
          type: "number"
          format: "int64"
          example: 123
          description: "The User ID provided by the LMS"
        role:
          type: "string"
          example: "Student"
          description: "The role the User has in the System"
        settings:
          type: "array"
          items:
            $ref: "#/components/schemas/Settings"
    UsersList:
      type: "array"
      items:
        type: "object"
        properties:
          name:
            type: "string"
            example: "Maria Musterfrau"
            description: "The name of the User"
    UsersListAdmin:
      type: "object"
      properties:
        users:
          type: "array"
          items:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Maria Musterfrau"
                description: "The name of the User"
              role:
                type: "string"
                example: "Student"
                description: "The role of the User"
              university:
                type: "string"
                example: "TH-AB"
                description: "The university of the User"
    News:
          type: "object"
          required:
            - "language_id"
            - "university"
            - "news_content"
            - "expiration_date"
            - "created_at"
          properties:
            id:
              type: "number"
              format: "int64"
              example: 1
              description: "Id for news. Autogenerated by DB"
            language_id:
              type: "string"
              example: "en / de"
              description: "The language of the news"
            university:
              type: "string"
              example: "HS-KE / HS-AS"
              description: "The university of the news"
            news_content:
              type: "string"
              example: "New course has been added to topic"
              description: "The content of the news"